{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Kootstrap Kootstrap is a bootstrap to Keras . It is a technique of compile and loading a datasets into a Keras application by means of a few initial instructions that enable the introduction of the rest of the program from an input device Get Code If you want to get code or contribute, go to Kootstrap GitHub . Commands Bellow you find how create a dataset , a subset , crawls images and execute a trainig your own model. Create a dataset Create a dataset with two classes. cd maker/ python Main.py --mode dataset --dataset_name graffiti --classes graffiti,street Create a subset Create a subset of this dataset with 90% original images. python Main.py --mode compiler --dataset_name graffiti --subset_name graffiti_per90_porp_default --per_images 90 Crawls images Crawls images to each class from Flickr. This seed the dataset and compile the subsets. cd ../crawler/ python Main.py --mode crawler,dataset --dataset dataset_example --classes graffiti,street --flickr_tags graffiti,street --num_images 100 Execute a training Execute a training with finetuning in Imagenet Model. cd ../trainer/ python Main.py --model_name model_example_1 --load_data dataset_example Test the predictions Test the predictions on model with set of test compileted in graffiti_per90_porp_default . cd ../tester/ python Main.py --model_name model_example_1 --load_data graffiti_per90_porp_default Compile a 1-Top charts Compile a 1-Top with a histogram from test results. cd ../analyzer/ python Main.py --model_name top --test_name testing_imagenet_test_set Tools Migrate datasets if you have a dataset and want migrate try: cd ../tools/ python Main.py --mode migrate --path_origin PATH_FOLDER_WITH_CLASSES --path_destiny PATH_TO_KOOTSTRAP_FOLDER if you want create a subset or recovery the metadata.json try: cd ../tools/ python Main.py --mode fix --path_origin PATH_TO_SUBSET_OR_DATASET Project layout data/ # folder with all data generate by applications. configs/ models/ datasets/ tests/ others/ applications/ # applications suches crawler, analyzers etc analyzer/ crawler/ maker/ system/ tester/ tools/ trainer/ docs/ # documentation of kootstrap mkdocs/ # generator of documentation Graphium Try use models trained on Kootstrap on your Graphium application.","title":"Home"},{"location":"#welcome-to-kootstrap","text":"Kootstrap is a bootstrap to Keras . It is a technique of compile and loading a datasets into a Keras application by means of a few initial instructions that enable the introduction of the rest of the program from an input device","title":"Welcome to Kootstrap"},{"location":"#get-code","text":"If you want to get code or contribute, go to Kootstrap GitHub .","title":"Get Code"},{"location":"#commands","text":"Bellow you find how create a dataset , a subset , crawls images and execute a trainig your own model.","title":"Commands"},{"location":"#create-a-dataset","text":"Create a dataset with two classes. cd maker/ python Main.py --mode dataset --dataset_name graffiti --classes graffiti,street","title":"Create a dataset"},{"location":"#create-a-subset","text":"Create a subset of this dataset with 90% original images. python Main.py --mode compiler --dataset_name graffiti --subset_name graffiti_per90_porp_default --per_images 90","title":"Create a subset"},{"location":"#crawls-images","text":"Crawls images to each class from Flickr. This seed the dataset and compile the subsets. cd ../crawler/ python Main.py --mode crawler,dataset --dataset dataset_example --classes graffiti,street --flickr_tags graffiti,street --num_images 100","title":"Crawls images"},{"location":"#execute-a-training","text":"Execute a training with finetuning in Imagenet Model. cd ../trainer/ python Main.py --model_name model_example_1 --load_data dataset_example","title":"Execute a training"},{"location":"#test-the-predictions","text":"Test the predictions on model with set of test compileted in graffiti_per90_porp_default . cd ../tester/ python Main.py --model_name model_example_1 --load_data graffiti_per90_porp_default","title":"Test the predictions"},{"location":"#compile-a-1-top-charts","text":"Compile a 1-Top with a histogram from test results. cd ../analyzer/ python Main.py --model_name top --test_name testing_imagenet_test_set","title":"Compile a 1-Top charts"},{"location":"#tools","text":"","title":"Tools"},{"location":"#migrate-datasets","text":"if you have a dataset and want migrate try: cd ../tools/ python Main.py --mode migrate --path_origin PATH_FOLDER_WITH_CLASSES --path_destiny PATH_TO_KOOTSTRAP_FOLDER if you want create a subset or recovery the metadata.json try: cd ../tools/ python Main.py --mode fix --path_origin PATH_TO_SUBSET_OR_DATASET","title":"Migrate datasets"},{"location":"#project-layout","text":"data/ # folder with all data generate by applications. configs/ models/ datasets/ tests/ others/ applications/ # applications suches crawler, analyzers etc analyzer/ crawler/ maker/ system/ tester/ tools/ trainer/ docs/ # documentation of kootstrap mkdocs/ # generator of documentation","title":"Project layout"},{"location":"#graphium","text":"Try use models trained on Kootstrap on your Graphium application.","title":"Graphium"},{"location":"about/installation/","text":"You need install a set of libs suchs pip install keras-vis pip install matplotli","title":"Instalation"},{"location":"about/license/","text":"MIT License Copyright (c) 2017 Glauco Roberto Munsberg Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/release-notes/","text":"Release Notes version 0.0.6 maker : Dataset name only in lower case crawler : Fixing flickr pagination crawl tools : Create tools to migrate old datasets to kootstrap dataset, fixing metadata and transfer files system : Train,Validation and Test proporcional size in kootstrap.json system : Fixing Kootstrap.py absolute path version 0.0.5 analyzer : Allowed to generate 1-Tops likes and deep visualization system : Fixing name Kootstrap.py configs : file name kootstrap.json fixed version 0.0.4 tester : Tester.py published system : Logger.py separete the logs by package Version 0.0.3 crawler : Flickr.py train, test and now validation set crawler : with train, test and now validation set maker : Dataset.py changet to maker package maker : now with train, test and now validation set compiler - maker : the package compiler renomed to maker Version 0.0.2 crawler : Crawler.py improved to get images from Flickr crawler : Dataset.py fixing the metadata crawler : Flickr.py improved to flickr.json file configurations compiler : Compiler.py create to create a subsets compiler : Scissor create to cut images configs : files flickr.json , koopstrap.json and scissor.json with new dataconfig Version 0.0.1 Crawler.py create the structure used do dataset Project start baseded on graphium project","title":"Release Notes"},{"location":"about/release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"about/release-notes/#version-006","text":"maker : Dataset name only in lower case crawler : Fixing flickr pagination crawl tools : Create tools to migrate old datasets to kootstrap dataset, fixing metadata and transfer files system : Train,Validation and Test proporcional size in kootstrap.json system : Fixing Kootstrap.py absolute path","title":"version 0.0.6"},{"location":"about/release-notes/#version-005","text":"analyzer : Allowed to generate 1-Tops likes and deep visualization system : Fixing name Kootstrap.py configs : file name kootstrap.json fixed","title":"version 0.0.5"},{"location":"about/release-notes/#version-004","text":"tester : Tester.py published system : Logger.py separete the logs by package","title":"version 0.0.4"},{"location":"about/release-notes/#version-003","text":"crawler : Flickr.py train, test and now validation set crawler : with train, test and now validation set maker : Dataset.py changet to maker package maker : now with train, test and now validation set compiler - maker : the package compiler renomed to maker","title":"Version 0.0.3"},{"location":"about/release-notes/#version-002","text":"crawler : Crawler.py improved to get images from Flickr crawler : Dataset.py fixing the metadata crawler : Flickr.py improved to flickr.json file configurations compiler : Compiler.py create to create a subsets compiler : Scissor create to cut images configs : files flickr.json , koopstrap.json and scissor.json with new dataconfig","title":"Version 0.0.2"},{"location":"about/release-notes/#version-001","text":"Crawler.py create the structure used do dataset Project start baseded on graphium project","title":"Version 0.0.1"},{"location":"analyzer/","text":"Analyzer The analyzer allow you see the information through any ways suchs deep visualization , 1-Top activations or plot 'loss and accuracity' from train. 1-Top from model See the 1-top from model and test result. python Main.py --mode top --test_name testing_imagenet_test_set --model_name 20181210091231 Top-1 to classe from model 20181210091231 at dataset testing_imagenet_test_set Deep Visualization See a deep visualization activation python Main.py --mode visualization --files ../../data/datasets/graffiti/classes/graffiti/4235365635_a5fba2a2d8_o.jpg --model_name model_example_1 --class_name freight\\ car Plot Loss an Acc Plot in images loss and acc of model python Main.py --mode plot --model_name 20181210091231 Acc Loss Tip You can use Visualizer to see the same information about loss and acc with a webserver. Arguments --mode : if you want top or visualization --title : title used in images or files to export Top arguments --number_of_tops : Set the number of top suchs 1 or 5. --test_name : Load the values predictions to top --save_histogram_to_csv : If you want save the .csv representation. --save_histogram_to_png : If you want save the .png representation. --save_list_image : If you save de list of images by class in .csv file. --number_limit_to_y : Top in chat to y. -1 do default Visualization arguments --files : file or list of images path to by analyze. --model_name : name of model that want load and view activations --modifier : you can choose None, 'guided', 'relu','deconv' and 'rectified'. separeted by comma if want multiple --class_name : name of classe used --show_both : show image and image with heatmap side by side --epoch : Set the epoch with weigths that you want save","title":"Analyzer"},{"location":"analyzer/#analyzer","text":"The analyzer allow you see the information through any ways suchs deep visualization , 1-Top activations or plot 'loss and accuracity' from train.","title":"Analyzer"},{"location":"analyzer/#1-top-from-model","text":"See the 1-top from model and test result. python Main.py --mode top --test_name testing_imagenet_test_set --model_name 20181210091231 Top-1 to classe from model 20181210091231 at dataset testing_imagenet_test_set","title":"1-Top from model"},{"location":"analyzer/#deep-visualization","text":"See a deep visualization activation python Main.py --mode visualization --files ../../data/datasets/graffiti/classes/graffiti/4235365635_a5fba2a2d8_o.jpg --model_name model_example_1 --class_name freight\\ car","title":"Deep Visualization"},{"location":"analyzer/#plot-loss-an-acc","text":"Plot in images loss and acc of model python Main.py --mode plot --model_name 20181210091231 Acc Loss Tip You can use Visualizer to see the same information about loss and acc with a webserver.","title":"Plot Loss an Acc"},{"location":"analyzer/#arguments","text":"--mode : if you want top or visualization --title : title used in images or files to export","title":"Arguments"},{"location":"analyzer/#top-arguments","text":"--number_of_tops : Set the number of top suchs 1 or 5. --test_name : Load the values predictions to top --save_histogram_to_csv : If you want save the .csv representation. --save_histogram_to_png : If you want save the .png representation. --save_list_image : If you save de list of images by class in .csv file. --number_limit_to_y : Top in chat to y. -1 do default","title":"Top arguments"},{"location":"analyzer/#visualization-arguments","text":"--files : file or list of images path to by analyze. --model_name : name of model that want load and view activations --modifier : you can choose None, 'guided', 'relu','deconv' and 'rectified'. separeted by comma if want multiple --class_name : name of classe used --show_both : show image and image with heatmap side by side --epoch : Set the epoch with weigths that you want save","title":"Visualization arguments"},{"location":"analyzer/analyzer/","text":"Definition Analizer.py is a class that compile information from Visualization or Top executation Params args : Args. type:argparse Attributes path_test_folder : Return the test folder. type:String path_test_predictions_csv : Return the path to csv predictions type:String predictions_csv : Return the files of predictions type:String test_md : Object test_md type:Metadata number_of_classes : Return the number of classes used type:Int","title":"Analyzer class"},{"location":"analyzer/analyzer/#definition","text":"Analizer.py is a class that compile information from Visualization or Top executation","title":"Definition"},{"location":"analyzer/analyzer/#params","text":"args : Args. type:argparse","title":"Params"},{"location":"analyzer/analyzer/#attributes","text":"path_test_folder : Return the test folder. type:String path_test_predictions_csv : Return the path to csv predictions type:String predictions_csv : Return the files of predictions type:String test_md : Object test_md type:Metadata number_of_classes : Return the number of classes used type:Int","title":"Attributes"},{"location":"analyzer/top_class/","text":"Definition TopClass.py is a class that compile the Top number that you want compile Params path_csv : File with predictions type:String path_destiny : Path to save the file .csv type:String number_of_tops : Number of tops type:Int number_of_classes : number of classes in model. type:Int logger : logger. type:Logger Attributes path_csv : Return teh csv path type:String path_destiny : Return the path to top file type:String number_of_tops : Return the number of top type:Int number_of_classes : Return number of classes type:Int name_file_top_classes : Name of file type:String file_name_top_classes : Path and name of file type:String","title":"TopClass class"},{"location":"analyzer/top_class/#definition","text":"TopClass.py is a class that compile the Top number that you want compile","title":"Definition"},{"location":"analyzer/top_class/#params","text":"path_csv : File with predictions type:String path_destiny : Path to save the file .csv type:String number_of_tops : Number of tops type:Int number_of_classes : number of classes in model. type:Int logger : logger. type:Logger","title":"Params"},{"location":"analyzer/top_class/#attributes","text":"path_csv : Return teh csv path type:String path_destiny : Return the path to top file type:String number_of_tops : Return the number of top type:Int number_of_classes : Return number of classes type:Int name_file_top_classes : Name of file type:String file_name_top_classes : Path and name of file type:String","title":"Attributes"},{"location":"analyzer/top_histogram/","text":"Definition TopHistogram.py is a class that compile the Histogram of test Params args : the args used type:Args path_csv : Path to csv preditions the file .csv type:String path_destiny : Path to destiny file type:String number_of_classes : number of classes in model. type:Int logger : logger. type:Logger Attributes path_predictions_csv : Return teh csv path type:String path_destiny : Return the path to top file type:String number_of_tops : Return the number of top type:Int number_of_classes : Return number of classes type:Int number_limit_to_y : Limit to y type:Int save_csv : Save in .csv file type:Boolean save_png : Save in .png file type:Boolean save_list_image : Save the list of images by class in .csv file type:Boolean file_name_out_csv : path to file .csv type:String file_name_out_png : path to file .png type:String file_name_out_list_csv : path to list of images by class .csv type:String","title":"TopHistogram class"},{"location":"analyzer/top_histogram/#definition","text":"TopHistogram.py is a class that compile the Histogram of test","title":"Definition"},{"location":"analyzer/top_histogram/#params","text":"args : the args used type:Args path_csv : Path to csv preditions the file .csv type:String path_destiny : Path to destiny file type:String number_of_classes : number of classes in model. type:Int logger : logger. type:Logger","title":"Params"},{"location":"analyzer/top_histogram/#attributes","text":"path_predictions_csv : Return teh csv path type:String path_destiny : Return the path to top file type:String number_of_tops : Return the number of top type:Int number_of_classes : Return number of classes type:Int number_limit_to_y : Limit to y type:Int save_csv : Save in .csv file type:Boolean save_png : Save in .png file type:Boolean save_list_image : Save the list of images by class in .csv file type:Boolean file_name_out_csv : path to file .csv type:String file_name_out_png : path to file .png type:String file_name_out_list_csv : path to list of images by class .csv type:String","title":"Attributes"},{"location":"analyzer/visualization/","text":"Definition Visualization.py is a class that allow you see the activation inside the model Params args : the args used type:Args logger : logger. type:Logger Attributes path_images : Return the images path type:[String] path_destiny : Return the path to top file type:String path_model_json : Return the path model json file type:String path_model_weights : Return the path model weights file type:String path_test_model_visualization_file : Return the folder where the file will by save type:String serial_number : A serial number type:String show_both : Show image side-by-side whit headmap type:Boolean images_list : List of images file type:[String] model : return the keras model used type:Model- Keras file_name_out_png : path to file .png type:String file_name_out_list_csv : path to list of images by class .csv type:String","title":"Visualization class"},{"location":"analyzer/visualization/#definition","text":"Visualization.py is a class that allow you see the activation inside the model","title":"Definition"},{"location":"analyzer/visualization/#params","text":"args : the args used type:Args logger : logger. type:Logger","title":"Params"},{"location":"analyzer/visualization/#attributes","text":"path_images : Return the images path type:[String] path_destiny : Return the path to top file type:String path_model_json : Return the path model json file type:String path_model_weights : Return the path model weights file type:String path_test_model_visualization_file : Return the folder where the file will by save type:String serial_number : A serial number type:String show_both : Show image side-by-side whit headmap type:Boolean images_list : List of images file type:[String] model : return the keras model used type:Model- Keras file_name_out_png : path to file .png type:String file_name_out_list_csv : path to list of images by class .csv type:String","title":"Attributes"},{"location":"crawler/","text":"Crawler A set of programs that help you create a dataset and crawls in dataset information to compile the classes of your dataset. Try execute the Main.py Commands Start executing to create a dataset with two classes. python Main.py --mode crawler,dataset --dataset dataset_example --classes graffiti,street --flickr_tags graffiti,street\\ art;street --num_images 100 Arguments Dataset --mode : Choose de dataset to use in clawer, if no exist will be created. \"dataset\" if you want only create a dataset and her classes. \"crawler\" if you create and crawls the classes images from the crawler_mode . --dataset_name : Name used to dataset. Default dataset_example --classes : List of classes to create into dataset. Separated by comma --classes_load_file : load name of classes by file, one class by line or separated by ; if .csv. try something like the file data/others/crawler/demo_classes.txt --crawler_mode : The source of images. Default \"flickr\" . --annotation : text annotation used you to describe the dataset. Flickr --flickr_tags : Name of tags useds on flickr, use comma to sum tags on search and (;) to separate de group of tags by classes. The same order of --classes need by used in --flickr_tags --flickr_tags_load_file : load name of tags by file, tags by line or separated by coma. try something like the file data/others/crawler/demo_flickr_tags.txt --num_images : Total image per class. Default 100","title":"Crawler"},{"location":"crawler/#crawler","text":"A set of programs that help you create a dataset and crawls in dataset information to compile the classes of your dataset. Try execute the Main.py","title":"Crawler"},{"location":"crawler/#commands","text":"Start executing to create a dataset with two classes. python Main.py --mode crawler,dataset --dataset dataset_example --classes graffiti,street --flickr_tags graffiti,street\\ art;street --num_images 100","title":"Commands"},{"location":"crawler/#arguments","text":"","title":"Arguments"},{"location":"crawler/#dataset","text":"--mode : Choose de dataset to use in clawer, if no exist will be created. \"dataset\" if you want only create a dataset and her classes. \"crawler\" if you create and crawls the classes images from the crawler_mode . --dataset_name : Name used to dataset. Default dataset_example --classes : List of classes to create into dataset. Separated by comma --classes_load_file : load name of classes by file, one class by line or separated by ; if .csv. try something like the file data/others/crawler/demo_classes.txt --crawler_mode : The source of images. Default \"flickr\" . --annotation : text annotation used you to describe the dataset.","title":"Dataset"},{"location":"crawler/#flickr","text":"--flickr_tags : Name of tags useds on flickr, use comma to sum tags on search and (;) to separate de group of tags by classes. The same order of --classes need by used in --flickr_tags --flickr_tags_load_file : load name of tags by file, tags by line or separated by coma. try something like the file data/others/crawler/demo_flickr_tags.txt --num_images : Total image per class. Default 100","title":"Flickr"},{"location":"crawler/crawler/","text":"Definition Crawler.py is a class that compile informations to Dataset.py and use the Flickr.py do crawls informations inside each of classes. Params args : Args. type:argparse logger : logger used in application default value is None. type:Logger Attributes dataset : Return the name of dataset. type:Dataset tags_by_class : List of tags by class type:List num_images : Number of images by class type:Int crawler_md : Object crawler_md type:Metadata","title":"Crawler class"},{"location":"crawler/crawler/#definition","text":"Crawler.py is a class that compile informations to Dataset.py and use the Flickr.py do crawls informations inside each of classes.","title":"Definition"},{"location":"crawler/crawler/#params","text":"args : Args. type:argparse logger : logger used in application default value is None. type:Logger","title":"Params"},{"location":"crawler/crawler/#attributes","text":"dataset : Return the name of dataset. type:Dataset tags_by_class : List of tags by class type:List num_images : Number of images by class type:Int crawler_md : Object crawler_md type:Metadata","title":"Attributes"},{"location":"crawler/flickr/","text":"Definition Flickr.py is a final class used by Crawler.py to download images from Flickr to a dataset created or open by Dataset.py . Params args : Args. type:argparse crawler_md : the crawler metadata references. type:Metadata class_name : name of class inside of dataset to put all files crawled. tags : the tags used to crawls of the param class_name . num_img_to_download : Number of images to crawled of this tags . year : Year of photo on flickr. month : Month of photo on flickr. day : Day of photo on flickr. logger : logger used in application default value is None. type:Logger Attributes images_metadata : List of images and their informations. type:List `[{'flickr_id':'91719271212', 'width':500,'height':500,'visible':true,'name':'91719271212_ah1cde.jpg'}]` total_images : Number of images download of tags by class type:List . num_img_to_download : Number of images that need by downloaded.","title":"Flickr class"},{"location":"crawler/flickr/#definition","text":"Flickr.py is a final class used by Crawler.py to download images from Flickr to a dataset created or open by Dataset.py .","title":"Definition"},{"location":"crawler/flickr/#params","text":"args : Args. type:argparse crawler_md : the crawler metadata references. type:Metadata class_name : name of class inside of dataset to put all files crawled. tags : the tags used to crawls of the param class_name . num_img_to_download : Number of images to crawled of this tags . year : Year of photo on flickr. month : Month of photo on flickr. day : Day of photo on flickr. logger : logger used in application default value is None. type:Logger","title":"Params"},{"location":"crawler/flickr/#attributes","text":"images_metadata : List of images and their informations. type:List `[{'flickr_id':'91719271212', 'width':500,'height':500,'visible':true,'name':'91719271212_ah1cde.jpg'}]` total_images : Number of images download of tags by class type:List . num_img_to_download : Number of images that need by downloaded.","title":"Attributes"},{"location":"maker/","text":"Maker The maker help you to create a dataset and subsets used to train or test. Try execute the Main.py class. Commands Create a dataset with two classes. python Main.py --mode dataset --dataset_name graffiti --classes graffiti,street Create a dataset from list of class names. python Main.py --mode dataset --dataset_name imagenet --classes_load_file ../../data/others/imagenet_synsets.txt Create a subset of this dataset with 90% original images python Main.py --mode compiler --dataset_name graffiti --subset_name graffiti_per90_porp_default --per_images 90 Arguments --mode : Use dataset to create a new and compiler to subsets. --dataset_name : Name used to dataset. Default dataset_example . --classes_load_file : If not empty load form file the name of classes. --classes : if empty and --classes_load_file empty the Compiler use all classes inside the dataset. Separete classes wite comma. --subset_name : name of subset. If not passed will setted as dataset_name _ serial_data . --num_images : Number of images from dataset. If negative use --per_images else both negative use all images. --per_images : percent of images from dataset [-1,100]. If negative use --num_images else both negative use all images. --scissor : if scissor is on will cut images has configs scissor.json else keep the image on exactly same size (only copy). --train_proportional_size : size of train, default 70%, setted if test exists. --validation_proportional_size : size of validation, default 20%, setted if validation exists. Zero if dont want validation --test_proportional_size : size of validation, default 20%, setted if test exists. Zero if dont want test --annotation : text annotation used you to describe the subset.","title":"Maker"},{"location":"maker/#maker","text":"The maker help you to create a dataset and subsets used to train or test. Try execute the Main.py class.","title":"Maker"},{"location":"maker/#commands","text":"Create a dataset with two classes. python Main.py --mode dataset --dataset_name graffiti --classes graffiti,street Create a dataset from list of class names. python Main.py --mode dataset --dataset_name imagenet --classes_load_file ../../data/others/imagenet_synsets.txt Create a subset of this dataset with 90% original images python Main.py --mode compiler --dataset_name graffiti --subset_name graffiti_per90_porp_default --per_images 90","title":"Commands"},{"location":"maker/#arguments","text":"--mode : Use dataset to create a new and compiler to subsets. --dataset_name : Name used to dataset. Default dataset_example . --classes_load_file : If not empty load form file the name of classes. --classes : if empty and --classes_load_file empty the Compiler use all classes inside the dataset. Separete classes wite comma. --subset_name : name of subset. If not passed will setted as dataset_name _ serial_data . --num_images : Number of images from dataset. If negative use --per_images else both negative use all images. --per_images : percent of images from dataset [-1,100]. If negative use --num_images else both negative use all images. --scissor : if scissor is on will cut images has configs scissor.json else keep the image on exactly same size (only copy). --train_proportional_size : size of train, default 70%, setted if test exists. --validation_proportional_size : size of validation, default 20%, setted if validation exists. Zero if dont want validation --test_proportional_size : size of validation, default 20%, setted if test exists. Zero if dont want test --annotation : text annotation used you to describe the subset.","title":"Arguments"},{"location":"maker/compiler/","text":"Definition Compiler.py is a class that cut imagens and transfer the files from dataset to subsets. Params args : Args. type:argparse Attributes dataset_name : Return the name of dataset. type:string dataset_path : return the path to files type:string dataset_md : the dataset metadata type:Metadata subsets_path : return the dataset path type:string subset_name : name received to subsets type:string subset_path : return the subset folder path type:string subset_md : the metadata compiled with informations received by args the dataset path type:Metadata subset_test_path : path to test folder of subset type:string subset_train_path : path to train folder of subset type:string list_of_classes : name of classes manipulated type:string","title":"Compiler class"},{"location":"maker/compiler/#definition","text":"Compiler.py is a class that cut imagens and transfer the files from dataset to subsets.","title":"Definition"},{"location":"maker/compiler/#params","text":"args : Args. type:argparse","title":"Params"},{"location":"maker/compiler/#attributes","text":"dataset_name : Return the name of dataset. type:string dataset_path : return the path to files type:string dataset_md : the dataset metadata type:Metadata subsets_path : return the dataset path type:string subset_name : name received to subsets type:string subset_path : return the subset folder path type:string subset_md : the metadata compiled with informations received by args the dataset path type:Metadata subset_test_path : path to test folder of subset type:string subset_train_path : path to train folder of subset type:string list_of_classes : name of classes manipulated type:string","title":"Attributes"},{"location":"maker/dataset/","text":"Definition The Dataset.py is responsible to create the folder and metadata about dataset and the classes received from args params. Params args : Args. type:argparse logger : logger used in application default value is None. type:Logger Attributes dataset_name : Return the name of dataset. type:String classes : List of classes used on dataset type:List dataset_path : Path to dataset type:String dataset_md : Object dataset_md type:Metadata Methods isADatasetOrSubset : Return the path and the type subset or dataset type:[String,String] normalizePathSubset : Normalize the path to by a absolute path","title":"Dataset class"},{"location":"maker/dataset/#definition","text":"The Dataset.py is responsible to create the folder and metadata about dataset and the classes received from args params.","title":"Definition"},{"location":"maker/dataset/#params","text":"args : Args. type:argparse logger : logger used in application default value is None. type:Logger","title":"Params"},{"location":"maker/dataset/#attributes","text":"dataset_name : Return the name of dataset. type:String classes : List of classes used on dataset type:List dataset_path : Path to dataset type:String dataset_md : Object dataset_md type:Metadata","title":"Attributes"},{"location":"maker/dataset/#methods","text":"isADatasetOrSubset : Return the path and the type subset or dataset type:[String,String] normalizePathSubset : Normalize the path to by a absolute path","title":"Methods"},{"location":"maker/scissor/","text":"Definition Scissor.py open the file and cut to fit exactly in proporcions described in scissor.json file. Params image_url : the image url to cut or manipulate. type:string logger : logger used in application default value is None. type:Logger Attributes original_image_url : Return the original url setted in params. type:Dataset original_width : Original with of image. type:int original_height : Original height of image. type:int image_name : image name type:string image_url : the url image type:Int image : A copy of original file type:Image width : width after processed type:Int height : heigth after processed type:Int window_height : width after processed rate type:Int window_width : heigth after processed rate type:Int manipulated : if the image was cutted type:bol Methods cut_to_fit : Cut the image to destiny_path close : force close the image","title":"Scissor class"},{"location":"maker/scissor/#definition","text":"Scissor.py open the file and cut to fit exactly in proporcions described in scissor.json file.","title":"Definition"},{"location":"maker/scissor/#params","text":"image_url : the image url to cut or manipulate. type:string logger : logger used in application default value is None. type:Logger","title":"Params"},{"location":"maker/scissor/#attributes","text":"original_image_url : Return the original url setted in params. type:Dataset original_width : Original with of image. type:int original_height : Original height of image. type:int image_name : image name type:string image_url : the url image type:Int image : A copy of original file type:Image width : width after processed type:Int height : heigth after processed type:Int window_height : width after processed rate type:Int window_width : heigth after processed rate type:Int manipulated : if the image was cutted type:bol","title":"Attributes"},{"location":"maker/scissor/#methods","text":"cut_to_fit : Cut the image to destiny_path close : force close the image","title":"Methods"},{"location":"system/helper/","text":"Definition The Helper return a instance of Helper. It content a list of methods that help the manipulation of date for exemple. Methods getTimeNow : Return a string with date in this format %Y-%m-%d %H:%M:%S . type:String getSerialNow : Return a string with a serial in this format %Y%m%d%H%M%S . type:String filePathToList : Receive a path of file, open and return a list of lines without \\n and \\r","title":"Helper class"},{"location":"system/helper/#definition","text":"The Helper return a instance of Helper. It content a list of methods that help the manipulation of date for exemple.","title":"Definition"},{"location":"system/helper/#methods","text":"getTimeNow : Return a string with date in this format %Y-%m-%d %H:%M:%S . type:String getSerialNow : Return a string with a serial in this format %Y%m%d%H%M%S . type:String filePathToList : Receive a path of file, open and return a list of lines without \\n and \\r","title":"Methods"},{"location":"system/koopstrap/","text":"Definition The koopstrap return a instance of Koopstrap. It is a Dic with many configs what you can see inside the directory data/configs/ Attributes config : the metadata of configuration has default. The file data/configs/kooperstrap.json is load to system. type:Dic Keys inside attribute config: { \"path_root\": \" PATH /kootstrap/\", \"path_log\":\"data/logs/\", \"path_config\":\"data/configs/\", \"path_dataset\":\"data/datasets/\", \"path_model\": \"data/models/\", \"path_test\": \"data/tests/\", \"file_exist_count_has_download\":true, \"transfer_file_type\": \"copy\", \"file_order_randomly\": true, \"log_level\":\"INFO\", \"version\":\"0.0.1\" } flickr : the metatada of flickr used has default. The file data/configs/flickr.json is load to system. type:Dic Keys inside attribute flickr: { \"flickr_public_key\":\" YOUR_KEY \", \"flickr_private_key\":\" YOUR_PRIVATE_KEY \", \"flickr_per_page\":500, \"flickr_year_min\":2010, \"flickr_year_max\":2017, \"flickr_size\":\"larger\", \"flickr_size_minimum\":244, \"flickr_size_maximum\":800, \"safe_mode\":true } flickr : the metatada of flickr used has default. The file data/configs/flickr.json is load to system. type:Dic Keys inside attribute flickr: { \"flickr_public_key\":\" YOUR_KEY \", \"flickr_private_key\":\" YOUR_PRIVATE_KEY \", \"flickr_per_page\":500, \"flickr_year_min\":2010, \"flickr_year_max\":2017, \"flickr_size_minimum_width\":500, \"flickr_size_minimum_height\":500, \"flickr_size_maximum_width\":1024, \"flickr_size_maximum_height\":1024, \"safe_mode\":true } scissor : the metatada of scissor used has default. The file data/configs/scissor.json is load to system. type:Dic Keys inside attribute scissor: { \"target_max_width\":224, \"target_max_height\":224, \"target_min_width\":224, \"target_min_height\":224, \"target_rate\":0.8 } trainer : the metatada of trainer used has default. The file data/configs/trainer.json is load to system. type:Dic Keys inside attribute scissor: { \"model\": \"VGG16\", \"include_top\": true, \"weights\": \"imagenet\", \"batch_size\": 128, \"target_size\": 224, \"epochs_total\": 2, \"target_loss\":-1.0, \"target_acc\":-1.0, \"save_weights_to_each\":2, \"shuffle\":true } Methods path_config : Return absolute path to configurations of koopstrap. type:String path_test : Return absolute path to tests folder. type:String path_log : Return absolute path to logs of system. type:String path_model : Return absolute path to models folder. type:String path_dataset : Return absolute path to all datasets. type:String version : Return version of koopstrap. type:String","title":"Koopstrap class"},{"location":"system/koopstrap/#definition","text":"The koopstrap return a instance of Koopstrap. It is a Dic with many configs what you can see inside the directory data/configs/","title":"Definition"},{"location":"system/koopstrap/#attributes","text":"config : the metadata of configuration has default. The file data/configs/kooperstrap.json is load to system. type:Dic Keys inside attribute config: { \"path_root\": \" PATH /kootstrap/\", \"path_log\":\"data/logs/\", \"path_config\":\"data/configs/\", \"path_dataset\":\"data/datasets/\", \"path_model\": \"data/models/\", \"path_test\": \"data/tests/\", \"file_exist_count_has_download\":true, \"transfer_file_type\": \"copy\", \"file_order_randomly\": true, \"log_level\":\"INFO\", \"version\":\"0.0.1\" } flickr : the metatada of flickr used has default. The file data/configs/flickr.json is load to system. type:Dic Keys inside attribute flickr: { \"flickr_public_key\":\" YOUR_KEY \", \"flickr_private_key\":\" YOUR_PRIVATE_KEY \", \"flickr_per_page\":500, \"flickr_year_min\":2010, \"flickr_year_max\":2017, \"flickr_size\":\"larger\", \"flickr_size_minimum\":244, \"flickr_size_maximum\":800, \"safe_mode\":true } flickr : the metatada of flickr used has default. The file data/configs/flickr.json is load to system. type:Dic Keys inside attribute flickr: { \"flickr_public_key\":\" YOUR_KEY \", \"flickr_private_key\":\" YOUR_PRIVATE_KEY \", \"flickr_per_page\":500, \"flickr_year_min\":2010, \"flickr_year_max\":2017, \"flickr_size_minimum_width\":500, \"flickr_size_minimum_height\":500, \"flickr_size_maximum_width\":1024, \"flickr_size_maximum_height\":1024, \"safe_mode\":true } scissor : the metatada of scissor used has default. The file data/configs/scissor.json is load to system. type:Dic Keys inside attribute scissor: { \"target_max_width\":224, \"target_max_height\":224, \"target_min_width\":224, \"target_min_height\":224, \"target_rate\":0.8 } trainer : the metatada of trainer used has default. The file data/configs/trainer.json is load to system. type:Dic Keys inside attribute scissor: { \"model\": \"VGG16\", \"include_top\": true, \"weights\": \"imagenet\", \"batch_size\": 128, \"target_size\": 224, \"epochs_total\": 2, \"target_loss\":-1.0, \"target_acc\":-1.0, \"save_weights_to_each\":2, \"shuffle\":true }","title":"Attributes"},{"location":"system/koopstrap/#methods","text":"path_config : Return absolute path to configurations of koopstrap. type:String path_test : Return absolute path to tests folder. type:String path_log : Return absolute path to logs of system. type:String path_model : Return absolute path to models folder. type:String path_dataset : Return absolute path to all datasets. type:String version : Return version of koopstrap. type:String","title":"Methods"},{"location":"system/logger/","text":"Definition Logger.py create files with log on data/logs/ Params app_name : name of application . type:string level : level INFO. type:string Attributes logging : logging used type:logging Methods error : log a error. type:String critical : log a critical. type:String warning : log a warning. type:String info : log a info. type:String debug : log a debug. type:String","title":"Logger class"},{"location":"system/logger/#definition","text":"Logger.py create files with log on data/logs/","title":"Definition"},{"location":"system/logger/#params","text":"app_name : name of application . type:string level : level INFO. type:string","title":"Params"},{"location":"system/logger/#attributes","text":"logging : logging used type:logging","title":"Attributes"},{"location":"system/logger/#methods","text":"error : log a error. type:String critical : log a critical. type:String warning : log a warning. type:String info : log a info. type:String debug : log a debug. type:String","title":"Methods"},{"location":"system/metadata/","text":"Definition The metadata transformation class Attributes metadata : the metadata file .json is load to system. type:Dic path_file : absolute path to metadata file. type:String Methods save : save metadata on path_file.","title":"Metadata class"},{"location":"system/metadata/#definition","text":"The metadata transformation class","title":"Definition"},{"location":"system/metadata/#attributes","text":"metadata : the metadata file .json is load to system. type:Dic path_file : absolute path to metadata file. type:String","title":"Attributes"},{"location":"system/metadata/#methods","text":"save : save metadata on path_file.","title":"Methods"},{"location":"tester/","text":"Maker The tester run the model generated in Trainer and test the predictions. Commands To use a subset of test images in a model try: python Main.py --model_name model_example_1 --load_data imagenet_per90_porp_default Arguments --model_name : Name or path to a model in datasets folder. --load_data : Path to any subset or dataset compiled by koopstrap to test, if None we use the test set from subset of train. --test_name : Name to this test, if empty save a composition from serial number and the dataset tested --epoch : Set the epoch with weigths that you want save. --classes : if empty and --classes_load_file empty the Compiler use all classes inside the dataset. Separete classes wite comma. --set : Choose if the test will use the train, validation or test set of images on subset else selected a dateset the arg will by ignorated. --annotation : annotation.","title":"Tester"},{"location":"tester/#maker","text":"The tester run the model generated in Trainer and test the predictions.","title":"Maker"},{"location":"tester/#commands","text":"To use a subset of test images in a model try: python Main.py --model_name model_example_1 --load_data imagenet_per90_porp_default","title":"Commands"},{"location":"tester/#arguments","text":"--model_name : Name or path to a model in datasets folder. --load_data : Path to any subset or dataset compiled by koopstrap to test, if None we use the test set from subset of train. --test_name : Name to this test, if empty save a composition from serial number and the dataset tested --epoch : Set the epoch with weigths that you want save. --classes : if empty and --classes_load_file empty the Compiler use all classes inside the dataset. Separete classes wite comma. --set : Choose if the test will use the train, validation or test set of images on subset else selected a dateset the arg will by ignorated. --annotation : annotation.","title":"Arguments"},{"location":"tester/mananger/","text":"Definition The Mananger.py used to mananger the informations in a test executation. Params Args : args. type:Args logger : logger used in application default value is None. type:Logger Methods setModel : Set the model keras to mananger getModelWithWeights : Return the model of keras compiled with args. type:Model- Keras","title":"Mananger class"},{"location":"tester/mananger/#definition","text":"The Mananger.py used to mananger the informations in a test executation.","title":"Definition"},{"location":"tester/mananger/#params","text":"Args : args. type:Args logger : logger used in application default value is None. type:Logger","title":"Params"},{"location":"tester/mananger/#methods","text":"setModel : Set the model keras to mananger getModelWithWeights : Return the model of keras compiled with args. type:Model- Keras","title":"Methods"},{"location":"tester/tester/","text":"Definition The Tester.py execute the test and compile informations from predictions. Params args : Args. type:Args Methods star : Execute the compilation on initializer classe pathFromTestName : Return the path of test from a name of test. type:String","title":"Tester class"},{"location":"tester/tester/#definition","text":"The Tester.py execute the test and compile informations from predictions.","title":"Definition"},{"location":"tester/tester/#params","text":"args : Args. type:Args","title":"Params"},{"location":"tester/tester/#methods","text":"star : Execute the compilation on initializer classe pathFromTestName : Return the path of test from a name of test. type:String","title":"Methods"},{"location":"tools/","text":"Tools The tools help you to Fix a dataset metadata or Migrate a folder of images to a valid dataset for example. Commands Lost the metadata.json from a dataset or subset? Try: python Main.py --mode fix --path_origin PATH_TO_SUBSET_OR_DATASET Need migrate a folder to a dataset in Kootstrap? Try: python Main.py --mode migrate --path_origin PATH_FOLDER_WITH_CLASSES --path_destiny PATH_TO_KOOTSTRAP_FOLDER Copy or move files to inside a dataset? Try: python Main.py --mode transfer --path_origin PATH_FOLDER_WITH_CLASSES --path_destiny PATH_TO_KOOTSTRAP_FOLDER Arguments --mode : Use fix to recovery a metadata, migrate to create a new metadata or transfer to move files. --path_origin : Path origin of data, in fix need be a dataset ou subset. To migrate or transfer a folder with data to migrate. --path_destiny : On migrate you need set the Kootstrap folder and transfer any folder. --copy_way : To migrate or transfer if set with move after copy will remove the original file. --max_files_by_class : To migrate or transfer set a limit to create a dataset.","title":"Tools"},{"location":"tools/#tools","text":"The tools help you to Fix a dataset metadata or Migrate a folder of images to a valid dataset for example.","title":"Tools"},{"location":"tools/#commands","text":"Lost the metadata.json from a dataset or subset? Try: python Main.py --mode fix --path_origin PATH_TO_SUBSET_OR_DATASET Need migrate a folder to a dataset in Kootstrap? Try: python Main.py --mode migrate --path_origin PATH_FOLDER_WITH_CLASSES --path_destiny PATH_TO_KOOTSTRAP_FOLDER Copy or move files to inside a dataset? Try: python Main.py --mode transfer --path_origin PATH_FOLDER_WITH_CLASSES --path_destiny PATH_TO_KOOTSTRAP_FOLDER","title":"Commands"},{"location":"tools/#arguments","text":"--mode : Use fix to recovery a metadata, migrate to create a new metadata or transfer to move files. --path_origin : Path origin of data, in fix need be a dataset ou subset. To migrate or transfer a folder with data to migrate. --path_destiny : On migrate you need set the Kootstrap folder and transfer any folder. --copy_way : To migrate or transfer if set with move after copy will remove the original file. --max_files_by_class : To migrate or transfer set a limit to create a dataset.","title":"Arguments"},{"location":"tools/fixmetadata/","text":"Definition FixMetadata.py recovery the file metadata.json to subset or dataset . Params args : The args type:args","title":"FixMetadata class"},{"location":"tools/fixmetadata/#definition","text":"FixMetadata.py recovery the file metadata.json to subset or dataset .","title":"Definition"},{"location":"tools/fixmetadata/#params","text":"args : The args type:args","title":"Params"},{"location":"tools/migratedataset/","text":"Definition MigrateDataset.py create a dataset from a folder. Params args : The args type:args","title":"MigrateDataset class"},{"location":"tools/migratedataset/#definition","text":"MigrateDataset.py create a dataset from a folder.","title":"Definition"},{"location":"tools/migratedataset/#params","text":"args : The args type:args","title":"Params"},{"location":"tools/transfer/","text":"Definition Transfer.py allow you move a lot of files and randomy if you need. Set the number of files too. Params args : The args type:args","title":"Transfer class"},{"location":"tools/transfer/#definition","text":"Transfer.py allow you move a lot of files and randomy if you need. Set the number of files too.","title":"Definition"},{"location":"tools/transfer/#params","text":"args : The args type:args","title":"Params"},{"location":"trainer/","text":"Trainer The trainer train a model with a dataset or subset create by you. Try execute the Main.py class. Commands Start finetuning in image net with the subset imagenet_per90_porp_default created in maker. python Main.py --model_name model_example_1 --load_data imagenet_per90_porp_default Start finetuning in .h5 weights with the subset imagenet_per90_porp_default created in maker. python Main.py --model_name model_example_1 --load_data imagenet_per90_porp_default --load_weights PATH_FILE .h5 Arguments --model_name : Name of model . Default name_dataset/name_subset _ serial_number . --load_model_file : load from a .json file the model --load_data : Use a name of dataset or from a subsets . --load_weights : Load the weights to model --annotation : text annotation used you to describe the model.","title":"Trainer"},{"location":"trainer/#trainer","text":"The trainer train a model with a dataset or subset create by you. Try execute the Main.py class.","title":"Trainer"},{"location":"trainer/#commands","text":"Start finetuning in image net with the subset imagenet_per90_porp_default created in maker. python Main.py --model_name model_example_1 --load_data imagenet_per90_porp_default Start finetuning in .h5 weights with the subset imagenet_per90_porp_default created in maker. python Main.py --model_name model_example_1 --load_data imagenet_per90_porp_default --load_weights PATH_FILE .h5","title":"Commands"},{"location":"trainer/#arguments","text":"--model_name : Name of model . Default name_dataset/name_subset _ serial_number . --load_model_file : load from a .json file the model --load_data : Use a name of dataset or from a subsets . --load_weights : Load the weights to model --annotation : text annotation used you to describe the model.","title":"Arguments"},{"location":"trainer/callback/","text":"Definition The Callback.py is extension of keras callback and provide metadatas to your model. Params model : the model. type:Model- Keras model_metadata : Args. type:Metadata logger : logger used in application default value is None. type:Logger Methods on_epoch_begin : Event when epoch start on_epoch_end : Event when epoch finish on_train_begin : Event when train start. The epoch 0 start after. on_train_end : Event when train end. The last epoch was finished.","title":"Callback class"},{"location":"trainer/callback/#definition","text":"The Callback.py is extension of keras callback and provide metadatas to your model.","title":"Definition"},{"location":"trainer/callback/#params","text":"model : the model. type:Model- Keras model_metadata : Args. type:Metadata logger : logger used in application default value is None. type:Logger","title":"Params"},{"location":"trainer/callback/#methods","text":"on_epoch_begin : Event when epoch start on_epoch_end : Event when epoch finish on_train_begin : Event when train start. The epoch 0 start after. on_train_end : Event when train end. The last epoch was finished.","title":"Methods"},{"location":"trainer/generator/","text":"Definition The Generator.py is responsible to create keras generator to train and validation. The job need compile under the informations inside of dataset/subset and model metadata. Params metadata_model : metadata to model. type:Metadata Attributes imageDateGeneratorValidation : The DataGenerator keras to validation set. type:ImageDataGenerator imageDateGeneratorTrain : The DataGenerator keras to train set type:ImageDataGenerator Methods getTrainGenerator : Return the trainer generator type:ImageDataGenerator getValidationGenerator : Return the validatior generator type:ImageDataGenerator","title":"Generator class"},{"location":"trainer/generator/#definition","text":"The Generator.py is responsible to create keras generator to train and validation. The job need compile under the informations inside of dataset/subset and model metadata.","title":"Definition"},{"location":"trainer/generator/#params","text":"metadata_model : metadata to model. type:Metadata","title":"Params"},{"location":"trainer/generator/#attributes","text":"imageDateGeneratorValidation : The DataGenerator keras to validation set. type:ImageDataGenerator imageDateGeneratorTrain : The DataGenerator keras to train set type:ImageDataGenerator","title":"Attributes"},{"location":"trainer/generator/#methods","text":"getTrainGenerator : Return the trainer generator type:ImageDataGenerator getValidationGenerator : Return the validatior generator type:ImageDataGenerator","title":"Methods"},{"location":"trainer/mananger/","text":"Definition The Mananger.py is responsible mananger informations to Trainer.py class. Params args : Args. type:argparse logger : logger used in application default value is None. type:Logger Attributes model : Return the model Keras loaded. type:Model- Keras model_name : Name of this model type:String metadata : Return the metadata from Trainer type:Metadata path_load_subset : Path to subset dataset/subset type:String path_model : Path to model folder type:String path_model_test : Path to model test folder type:String path_model_file : Path to model file .json type:String path_model_weights_file : Path to weights file .h5 type:String path_dataset : Path to dataset folder type:String dataset_set_type : Type of set. If is dataset or subset type:String files_attached_md : Name of files used in train and validation action type:Metadata Methods getModel : Return the model to train type:Model- Keras getCallbacks : Return the Callback.py instance to this train [type:Callback] printModel : Print the model save : Execute the command saveWeights and saveModel saveWeights : Save the wiegths from model saveModel : Save the model in .json file format configFitGenerator : get generators and informations used in fit_generator or fit method. {\"g_train\":type:ImageDataGenerator, \"g_validation\":type:ImageDataGenerator, \"steps_per_epoch_train\":type:Int, \"steps_per_epoch_validation\":type:Int, \"epochs\":type:Int}","title":"Mananger class"},{"location":"trainer/mananger/#definition","text":"The Mananger.py is responsible mananger informations to Trainer.py class.","title":"Definition"},{"location":"trainer/mananger/#params","text":"args : Args. type:argparse logger : logger used in application default value is None. type:Logger","title":"Params"},{"location":"trainer/mananger/#attributes","text":"model : Return the model Keras loaded. type:Model- Keras model_name : Name of this model type:String metadata : Return the metadata from Trainer type:Metadata path_load_subset : Path to subset dataset/subset type:String path_model : Path to model folder type:String path_model_test : Path to model test folder type:String path_model_file : Path to model file .json type:String path_model_weights_file : Path to weights file .h5 type:String path_dataset : Path to dataset folder type:String dataset_set_type : Type of set. If is dataset or subset type:String files_attached_md : Name of files used in train and validation action type:Metadata","title":"Attributes"},{"location":"trainer/mananger/#methods","text":"getModel : Return the model to train type:Model- Keras getCallbacks : Return the Callback.py instance to this train [type:Callback] printModel : Print the model save : Execute the command saveWeights and saveModel saveWeights : Save the wiegths from model saveModel : Save the model in .json file format configFitGenerator : get generators and informations used in fit_generator or fit method. {\"g_train\":type:ImageDataGenerator, \"g_validation\":type:ImageDataGenerator, \"steps_per_epoch_train\":type:Int, \"steps_per_epoch_validation\":type:Int, \"epochs\":type:Int}","title":"Methods"},{"location":"trainer/model/","text":"Definition The Model.py is responsible to check the mane and path of each model. Params args : Args. type:argparse logger : logger used in application default value is None. type:Logger Methods normalizeModelName : Return the name normalized to use or get information in datasets folder type:String pathFromModelName : Return the path model from name of model","title":"Model class"},{"location":"trainer/model/#definition","text":"The Model.py is responsible to check the mane and path of each model.","title":"Definition"},{"location":"trainer/model/#params","text":"args : Args. type:argparse logger : logger used in application default value is None. type:Logger","title":"Params"},{"location":"trainer/model/#methods","text":"normalizeModelName : Return the name normalized to use or get information in datasets folder type:String pathFromModelName : Return the path model from name of model","title":"Methods"},{"location":"trainer/trainer/","text":"Definition The Trainer.py is responsible to train the model and call by Main.py class. Params args : Args. type:argparse Attributes mananger : Return the mananger of trainer. type:Mananger model : Return the model used in train type:Model- Keras Methods start : Start the executation compilete in initialize.","title":"Trainer class"},{"location":"trainer/trainer/#definition","text":"The Trainer.py is responsible to train the model and call by Main.py class.","title":"Definition"},{"location":"trainer/trainer/#params","text":"args : Args. type:argparse","title":"Params"},{"location":"trainer/trainer/#attributes","text":"mananger : Return the mananger of trainer. type:Mananger model : Return the model used in train type:Model- Keras","title":"Attributes"},{"location":"trainer/trainer/#methods","text":"start : Start the executation compilete in initialize.","title":"Methods"},{"location":"visualizer/","text":"Viewing is the best way to track and visualize the training of a network. Through a web client you will be able to follow the training setup as well as the Loss and Acc. Start WebServer cd visualizer/ python Main.py Go to your browser and open http://localhost:8000 to see mor information.","title":"Visualizer"},{"location":"visualizer/#start-webserver","text":"cd visualizer/ python Main.py Go to your browser and open http://localhost:8000 to see mor information.","title":"Start WebServer"}]}